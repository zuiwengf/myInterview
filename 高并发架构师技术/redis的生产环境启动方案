redis的生产环境启动方案


  要把redis作为一个系统的daemon进程去运行的，每次系统启动，redis进程一起启动
  （1）redis utils目录下，有个redis_init_script脚本
  （2）将redis_init_script脚本拷贝到linux的/etc/init.d目录中，将redis_init_script重命名为redis_6379，6379是我们希望这个redis实例监听的端口号
  （3）修改redis_6379脚本的第6行的REDISPORT，设置为相同的端口号（默认就是6379）
  （4）创建两个目录：/etc/redis（存放redis的配置文件），/var/redis/6379（存放redis的持久化文件）
  （5）修改redis配置文件（默认在根目录下，redis.conf），拷贝到/etc/redis目录中，修改名称为6379.conf
  （6）修改redis.conf中的部分配置为生产环境
  daemonize	yes							让redis以daemon进程运行
  pidfile		/var/run/redis_6379.pid 	设置redis的pid文件位置
  port		6379						设置redis的监听端口号
  dir 		/var/redis/6379				设置持久化文件的存储位置
  （7）启动redis，执行cd /etc/init.d, chmod 777 redis_6379，./redis_6379 start
  （8）确认redis进程是否启动，ps -ef | grep redis
  （9）让redis跟随系统启动自动启动

  在redis_6379脚本中，最上面，加入两行注释
  # chkconfig:   2345 90 10
  # description:  Redis is a persistent key-value database
  chkconfig redis_6379 on

------------------------------------------------------------------------

redis cli的使用
  redis-cli SHUTDOWN，连接本机的6379端口停止redis进程
  redis-cli -h 127.0.0.1 -p 6379 SHUTDOWN，制定要连接的ip和端口号
  redis-cli PING，ping redis的端口，看是否正常
  redis-cli，进入交互式命令行
  SET k1 v1
  GET k1
  redis的技术，包括4块
  redis各种数据结构和命令的使用，包括java api的使用
  redis一些特殊的解决方案的使用，pub/sub消息系统，分布式锁，输入的自动完成，等等
  redis日常的管理相关的命令
  redis企业级的集群部署和架构
  我们这套课程，实际上是针对企业级的大型缓存架构，用得项目，真实的大型电商网站的详情页系统（缓存）
  我们首先讲解的第一块，其实就是企业级的大型缓存架构中的，redis集群架构（海量数据、高并发、高可用），最最流行，最最常用的分布式缓存系统
  后面我们做商品详情页系统的业务开发的时候，当然也会去用redis的一些命令
  redis基础知识：教程，书籍，视频
  redis持久化、主从架构、复制原理、集群架构、数据分布式存储原理、哨兵原理、高可用架构
  网上一些redis的教程，持久化，集群，哨兵，也讲了，都是泛泛而讲，简单带你搭建一下
  我会深入集群架构的底层原理，哨兵的底层原理，用一线的经验，告诉你，redis的大规模的架构师如何去支撑海量数据、高并发、高可用的


持久化配置
    1、如何配置RDB持久化机制
    redis.conf文件，也就是/etc/redis/6379.conf，去配置持久化
    save 60 1000
    每隔60s，如果有超过1000个key发生了变更，那么就生成一个新的dump.rdb文件，就是当前redis内存中完整的数据快照，这个操作也被称之为snapshotting，快照
    也可以手动调用save或者bgsave命令，同步或异步执行rdb快照生成
    save可以设置多个，就是多个snapshotting检查点，每到一个检查点，就会去check一下，是否有指定的key数量发生了变更，如果有，就生成一个新的dump.rdb文件
    ------------------------------------------------------------------------
    2、RDB持久化机制的工作流程
    （1）redis根据配置自己尝试去生成rdb快照文件
    （2）fork一个子进程出来
    （3）子进程尝试将数据dump到临时的rdb快照文件中
    （4）完成rdb快照文件的生成之后，就替换之前的旧的快照文件
    dump.rdb，每次生成一个新的快照，都会覆盖之前的老快照
    ------------------------------------------------------------------------
    3、基于RDB持久化机制的数据恢复实验
    （1）在redis中保存几条数据，立即停掉redis进程，然后重启redis，看看刚才插入的数据还在不在
    数据还在，为什么？
    带出来一个知识点，通过redis-cli SHUTDOWN这种方式去停掉redis，其实是一种安全退出的模式，redis在退出的时候会将内存中的数据立即生成一份完整的rdb快照
    /var/redis/6379/dump.rdb
    （2）在redis中再保存几条新的数据，用kill -9粗暴杀死redis进程，模拟redis故障异常退出，导致内存数据丢失的场景
    这次就发现，redis进程异常被杀掉，数据没有进dump文件，几条最新的数据就丢失了
    （2）手动设置一个save检查点，save 5 1
    （3）写入几条数据，等待5秒钟，会发现自动进行了一次dump rdb快照，在dump.rdb中发现了数据
    （4）异常停掉redis进程，再重新启动redis，看刚才插入的数据还在
    rdb的手动配置检查点，以及rdb快照的生成，包括数据的丢失和恢复，全都演示过了
